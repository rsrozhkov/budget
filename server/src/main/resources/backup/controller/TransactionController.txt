package info.ateh.budgetapp.controller;

import info.ateh.budgetapp.entity.Member;
import info.ateh.budgetapp.exception.MemberNotFoundException;
import info.ateh.budgetapp.transactionRepository.MemberRepository;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.Resources;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.stream.Collectors;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

@RestController
public class MemberController {

    private final MemberRepository transactionRepository;
    private final MemberResourceAssembler assembler;

    MemberController(MemberRepository transactionRepository,
                     MemberResourceAssembler assembler) {
        this.transactionRepository = transactionRepository;
        this.assembler = assembler;
    }

    @GetMapping("/members")
    Resources<Resource<Member>> all() {

        List<Resource<Member>> members = transactionRepository.findAll().stream()
                .map(assembler::toResource)
                .collect(Collectors.toList());

        return new Resources<>(members,
                linkTo(methodOn(MemberController.class).all()).withSelfRel());
    }

    @PostMapping("/members")
    ResponseEntity<?> newMember(@RequestBody Member newMember) throws URISyntaxException {

        Resource<Member> resource = assembler.toResource(transactionRepository.save(newMember));

        return ResponseEntity
                .created(new URI(resource.getId().expand().getHref()))
                .body(resource);
    }

    @GetMapping("/members/{id}")
    Resource<Member> one(@PathVariable Long id) {
        Member member = transactionRepository.findById(id)
                .orElseThrow(() -> new MemberNotFoundException(id));

        return assembler.toResource(member);
    }

    @PutMapping("/members/{id}")
    ResponseEntity<?> replaceMember(@RequestBody Member newMember, @PathVariable Long id) throws URISyntaxException {

        Member updatedMember = transactionRepository.findById(id)
                .map(member -> {
                    member.setName(newMember.getName());
                    return transactionRepository.save(member);
                })
                .orElseGet(() -> {
                    newMember.setId(id);
                    return transactionRepository.save(newMember);
                });

        Resource<Member> resource = assembler.toResource(updatedMember);

        return ResponseEntity
                .created(new URI(resource.getId().expand().getHref()))
                .body(resource);
    }

    @DeleteMapping("/members/{id}")
    ResponseEntity<?> deleteMember(@PathVariable Long id) {

        transactionRepository.deleteById(id);

        return ResponseEntity.noContent().build();
    }
}
